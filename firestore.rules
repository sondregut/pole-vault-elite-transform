rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Users collection and its subcollections
    match /users/{userId} {
      // Allow any authenticated user to read any profile
      allow read: if request.auth != null;
      // Allow a user to write to their own profile OR allow admins to write to any profile
      allow write: if request.auth != null && (request.auth.uid == userId || isAdmin());

      // Rule for 'profile' subcollection - ensure this is accessible
      match /profile/{profileDocId} {
        // Allow any authenticated user to read profile data
        allow read: if request.auth != null;
        // Allow only the user to write to their own profile
        allow write: if request.auth != null && request.auth.uid == userId;
      }

      // Rule for 'poles' subcollection
      // Allows a user to read and write their own poles
      match /poles/{poleId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
    }

      // Rule for 'sessions' subcollection (for AppHeader, SessionDetails, etc.)
      // Allows a user to read and write their own sessions
      // Allows admins to read sessions for analytics/video management
      match /sessions/{sessionId} {
        allow read: if request.auth != null && (request.auth.uid == userId || isAdmin());
        allow write: if request.auth != null && request.auth.uid == userId;
      }

      // Rule for 'preferences' subcollection (for SessionDetails, LogSessionScreen, etc.)
      // Allows a user to read and write their own preferences (e.g., 'settings' document)
      match /preferences/{preferenceDocId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }

      // Rule for 'friends' subcollection (for FriendList.tsx)
      // Allows a user to read and write their own friends list
      match /friends/{friendDocId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }

      // Rule for 'friendRequests' subcollection (for FriendRequests.tsx)
      // Allows a user to read and write their own friend requests
      match /friendRequests/{requestDocId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }

      // Rule for 'locations' subcollection (used in LogSessionScreen)
      // Allows a user to read and write their own saved locations
      match /locations/{locationId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }

      // Add any other subcollections of /users/{userId} here following the same pattern
    }

    // Top-level 'feed' collection
    match /feed/{postId} {
      allow read: if request.auth != null; // Allow any authenticated user to read the feed
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid; // User can create posts for themselves

      // Allow post owner to update/delete their own posts
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;

      // Allow updates in two cases:
      // 1. Post owner updating their own post
      // 2. Any authenticated user adding comments or likes (but not changing other fields)
      allow update: if request.auth != null && (
        // Owner can update anything
        resource.data.userId == request.auth.uid ||
        // Others can only update comments and likes arrays
        (
          // Ensure userId hasn't changed
          request.resource.data.userId == resource.data.userId &&
          // Ensure core post data hasn't changed
          request.resource.data.postText == resource.data.postText &&
          request.resource.data.sessionId == resource.data.sessionId &&
          request.resource.data.sharedAt == resource.data.sharedAt &&
          // Allow changes to comments and likes
          (request.resource.data.comments != resource.data.comments ||
           request.resource.data.likes != resource.data.likes)
        )
      );
    }

    // Top-level 'posts' collection
    match /posts/{postId} {
      allow read: if request.auth != null; // Allow any authenticated user to read posts
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid; // User can create posts for themselves
      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid; // User can update/delete their own posts
    }

    // Top-level 'sessionShares' collection (from useShareSession.ts)
    match /sessionShares/{shareId} {
        // Allow owner or friends in friendUids to read.
        // For create, a user can create shares where they are the ownerUid.
        // Update/delete might be restricted to ownerUid.
        allow read: if request.auth != null &&
                      (request.auth.uid == resource.data.ownerUid || request.auth.uid in resource.data.friendUids);
        allow create: if request.auth != null && request.resource.data.ownerUid == request.auth.uid;
        allow update, delete: if request.auth != null && resource.data.ownerUid == request.auth.uid;
    }

    // Top-level 'reports' collection for reporting inappropriate content
    match /reports/{reportId} {
      // Only allow authenticated users to create reports
      allow create: if request.auth != null &&
                      request.resource.data.reportedBy == request.auth.uid;
      // Admins can read and update reports (to mark as handled/dismissed)
      allow read, update: if isAdmin();
      // Reports cannot be deleted
      allow delete: if false;
    }

    // ============================================
    // INVITE LINKS COLLECTION - NEW
    // ============================================
    match /invite_links/{inviteId} {
      // Anyone can read invite links (needed for public invite pages)
      allow read: if true;

      // Only authenticated users can create invite links
      allow create: if request.auth != null
                    && request.resource.data.code is string
                    && request.resource.data.code.size() == 8
                    && request.resource.data.username is string
                    && request.resource.data.type in ['friend_invite', 'app_share']
                    && request.resource.data.used == false;

      // Only the creator can update their own invite links
      allow update: if request.auth != null
                    && (resource.data.user_id == request.auth.uid
                        || request.auth.uid != null); // Allow marking as used by anyone authenticated

      // Only the creator can delete their invite links
      allow delete: if request.auth != null
                    && resource.data.user_id == request.auth.uid;
    }

    // ============================================
    // PROMO CODES COLLECTION - ADMIN ONLY
    // ============================================
    match /promoCodes/{codeId} {
      // Anyone authenticated can read promo codes (needed for redemption)
      allow read: if request.auth != null;

      // Only admins can create, update, or delete promo codes
      allow create, update, delete: if isAdmin();
    }

    // ============================================
    // ANALYTICS & METRICS - ADMIN ONLY
    // ============================================

    // Cached metrics for analytics dashboard
    match /metrics/{metricId} {
      // Only admins can read metrics
      allow read: if isAdmin();
      // Only cloud functions/server can write
      allow write: if false;
    }

    // Revenue events from webhooks (RevenueCat, etc.)
    match /revenueEvents/{eventId} {
      // Only admins can read revenue events
      allow read: if isAdmin();
      // Only cloud functions/webhooks can write
      allow write: if false;
    }

    // Error logs from mobile app and web
    match /errorLogs/{logId} {
      // Users can create error logs from their app
      allow create: if request.auth != null;
      // Only admins can read error logs
      allow read: if isAdmin();
      // Error logs are immutable
      allow update, delete: if false;
    }

    // ============================================
    // FEATURE FLAGS - FOR A/B TESTING
    // ============================================

    match /featureFlags/{flagId} {
      // All authenticated users can read feature flags
      allow read: if request.auth != null;
      // Only admins can manage feature flags
      allow create, update, delete: if isAdmin();
    }

    // ============================================
    // NOTIFICATIONS - ADMIN MANAGED
    // ============================================

    // Scheduled notifications queue
    match /scheduledNotifications/{notificationId} {
      // Only admins can read scheduled notifications
      allow read: if isAdmin();
      // Only admins can create scheduled notifications
      allow create: if isAdmin();
      // Only cloud functions can mark as sent (update) or cleanup (delete)
      allow update, delete: if false;
    }

    // Notification delivery logs
    match /notificationLogs/{logId} {
      // Only admins can read notification logs
      allow read: if isAdmin();
      // Only cloud functions can write logs
      allow write: if false;
    }

    // ============================================
    // GDPR & DATA COMPLIANCE
    // ============================================

    // Data export requests (GDPR)
    match /dataExportRequests/{requestId} {
      // Users can create export requests for their own data
      allow create: if request.auth != null &&
        request.resource.data.userId == request.auth.uid;
      // Users can read their own export requests
      allow read: if request.auth != null &&
        resource.data.userId == request.auth.uid;
      // Admins can read all export requests
      allow read: if isAdmin();
      // Only cloud functions can update request status
      allow update: if false;
      // Export requests cannot be deleted
      allow delete: if false;
    }

    // Data deletion requests (GDPR)
    match /dataDeletionRequests/{requestId} {
      // Users can create deletion requests for their own data
      allow create: if request.auth != null &&
        request.resource.data.userId == request.auth.uid;
      // Users can read their own deletion requests
      allow read: if request.auth != null &&
        resource.data.userId == request.auth.uid;
      // Admins can read all deletion requests
      allow read: if isAdmin();
      // Only cloud functions can update request status
      allow update: if false;
      // Deletion requests cannot be deleted
      allow delete: if false;
    }
  }
}
